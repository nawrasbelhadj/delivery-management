security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider
            custom_authenticator: App\Security\AppCustomAuthentificationAuthenticator

            #                    # by default, the feature allows 5 login attempts per minute
            #                    login_throttling: null
            #
            #                    # configure the maximum login attempts (per minute)
            #                    login_throttling:
            #                        max_attempts: 3
            #
            #                    # configure the maximum login attempts in a custom period of time
            #                    login_throttling:
            #                        max_attempts: 3
            #                        interval: '15 minutes'
            #
            #                    # use a custom rate limiter via its service ID
            #                    login_throttling:
            #                        limiter: app.my_login_rate_limiter


            logout:
                path: app_logout
                # where to redirect after logout
                target: app_login
#                 invalidate_session: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true


#    role_hierarchy:
#        ROLE_ADMIN:       ROLE_USER
#        ROLE_AGENTADMIN:  ROLE_AGENT


    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/, roles: [ROLE_ADMIN, ROLE_AGENTADMIN , ROLE_DELIVERER , ROLE_USER] }

        - { path: ^/my_profile, roles: ROLE_USER }

        - { path: ^/list_users, roles: ROLE_ADMIN}
        - { path: ^/add_user, roles: ROLE_ADMIN }
        - { path: ^/update_user, roles: ROLE_ADMIN }

        - { path: ^/list_agents, roles: [ROLE_ADMIN , ROLE_AGENTADMIN , ROLE_AGENT ] }
        - { path: ^/add_agent, roles: [ ROLE_ADMIN , ROLE_AGENTADMIN ] }
        - { path: ^/update_agent, roles: [ ROLE_ADMIN , ROLE_AGENTADMIN ] }

        - { path: ^/list_posts, roles: [ROLE_ADMIN , ROLE_AGENTADMIN , ROLE_AGENT]}
        - { path: ^/add_post, roles: ROLE_ADMIN }
        - { path: ^/update_post, roles: ROLE_ADMIN }

        - { path: ^/history_courrier, roles: [ ROLE_AGENTADMIN , ROLE_AGENT] }
        - { path: ^/add_courrier, roles: [ ROLE_AGENTADMIN , ROLE_AGENT ] }
        - { path: ^/update_courrier, roles: [ ROLE_AGENTADMIN , ROLE_AGENT ] }

        - { path: ^/list_deliverers, roles: ROLE_ADMIN}
        - { path: ^/add_deliverer, roles: ROLE_ADMIN }
        - { path: ^/update_deliverer, roles: ROLE_ADMIN }




when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon












